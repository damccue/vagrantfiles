# -*- mode: ruby -*-
# vi: set ft=ruby :

# Setup chef download cache
host_cache_path = File.expand_path("../../.cache", __FILE__)
guest_cache_path = "/var/chef/cache"
FileUtils.mkdir(host_cache_path) unless File.exist?(host_cache_path)


VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

	config.vbguest.auto_update = false
	config.ssh.forward_agent = true	
	

	config.vm.provider "virtualbox" do |vb|
		vb.customize [
			"modifyvm", :id,
			"--nictype1", "Am79C973",
			"--ioapic", "on",
			"--rtcuseutc", "on",
			"--cpus", "4",
			"--memory", "2048"
		]
		#vb.gui = true
	end
	
	#config.vm.define "testc" do |testc|
	#	testc.vm.host_name = "testc"
	#	testc.vm.box = "centos64_64"
	#	testc.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/opscode_centos-6.4_chef-11.4.4.box"
	#	testc.vm.provision :shell, :inline => "curl -L https://www.opscode.com/chef/install.sh | sudo bash"
	#end
	
	config.vm.define "tests" do |tests|
		tests.vm.host_name = "tests"
		tests.vm.box = "centos64_64"	
		tests.vm.box_url = "https://opscode-vm.s3.amazonaws.com/vagrant/opscode_centos-6.4_chef-11.4.4.box"	
		
		#Network port forwards
		#tests.vm.network "forwarded_port", guest: 80, host: 10080#, auto_correct: true
		#tests.vm.network "forwarded_port", guest: 10443, host: 10443#, auto_correct: true
		#tests.vm.network "forwarded_port", guest: 4040, host: 14040#, auto_correct: true
		#tests.vm.network "forwarded_port", guest: 4000, host: 4000#, auto_correct: true
		#tests.vm.network "forwarded_port", guest: 9462, host: 19462#, auto_correct: true
		tests.vm.network "private_network", ip: "192.168.50.2"
		
		#Shared folders
		tests.vm.synced_folder host_cache_path, guest_cache_path
		tests.vm.synced_folder "../etc-chef-server", "/etc/chef-server"
		
		tests.vm.provision :chef_solo do |chef|
			chef.log_level = :debug
			chef.cookbooks_path = "../cookbooks"	
			chef.provisioning_path = guest_cache_path
			chef.add_recipe "chef-server"
			
			chef.json = { 
				:chef_server => {
					:server_url => "https://192.168.50.2:4000",
					:webui_enabled => true
				},
				"chef-server" => {
					"api_fqdn" => "localhost",
					"configuration" => {
						"nginx" => {
							"ssl_port" => "4000"
						}
					}
				}
			}
	#				"configuration" => {
	#					"chef_server_webui" => {
	#						"enable" => true
	#					},
	#					"nginx" => {
	#						"enable_non_ssl" => true
	#					}
	#				}
	#		#"lb" => { "enable" => false }
	#						#"url" => "http://localhost:80"
									
		end
		
		tests.vm.provision "chef_client" do |chef|
			chef.chef_server_url = "https://192.168.50.2:4000/"
			chef.validation_key_path = "../etc-chef-server/chef-validator.pem"
		end
		
		tests.vm.provision "shell", inline: "yum install telnet -y"
		tests.vm.provision "shell", inline: "service iptables stop"
		#tests.vm.provision "shell", inline: "cp -f /etc/chef-server/admin.pem /etc/chef-server/chef-validator.pem /etc/chef"
		#^^^ Run knife configure -i, use defaults but specify https://tests:4000 and use admin password from website
		
		tests.vm.provision "shell", inline: "chef-server-ctl reconfigure; chef-server-ctl restart"
	end
	



end



# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
#VAGRANTFILE_API_VERSION = "2"

#Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
#  config.vm.box = "base"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone.  Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file base.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # #   ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # #   content => "Welcome to your Vagrant-built virtual machine!
  # #	       Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  #   puppet.manifests_path = "manifests"
  #   puppet.manifest_file  = "init.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  #   chef.cookbooks_path = "../my-recipes/cookbooks"
  #   chef.roles_path = "../my-recipes/roles"
  #   chef.data_bags_path = "../my-recipes/data_bags"
  #   chef.add_recipe "mysql"
  #   chef.add_role "web"
  #
  #   # You may also specify custom JSON attributes:
  #   chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  #   chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  #   chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  #   chef.validation_client_name = "ORGNAME-validator"
#end

